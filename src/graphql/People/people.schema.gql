type Query {
  people(id: ID, entityID: ID): [People!]
}

type Mutation {
  createPeople(people: CreatePeopleInput!): MutatePeopleResult
  updatePeople(people: UpdatePeopleInput!): MutatePeopleResult
  deletePeople(id: ID!): DeleteResult
}

type People {
  id: ID!
  first_name: String!
  middle_name: String
  last_name: String!
  gender: String!
  date_of_birth: String!
  email: [Email!]
  nationality: Nationality!
  address: [Address!]
  course_instance: [CourseInstance!]
  created_at: String!
  updated_at: String!
}

type Email {
  id: ID!
  email_id: String!
  created_at: String!
  updated_at: String!
}

input CreatePeopleInput {
  first_name: String!
  middle_name: String
  last_name: String
  gender: String!
  date_of_birth: String!
  email: String!
  nationality_id: Int!
}

input UpdatePeopleInput {
  id: ID!
  first_name: String
  middle_name: String
  last_name: String
  gender: String
  date_of_birth: String
  nationality_id: Int
}

union MutatePeopleResult = People | ValidationError | BaseError
